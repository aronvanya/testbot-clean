from flask import Flask, request, jsonify
import os
import requests
import instaloader
import io
from collections import defaultdict

app = Flask(__name__)

# URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = "https://testbot-clean.vercel.app/webhook"
TELEGRAM_TOKEN = "7648873218:AAGs6RZlBrVjr1TkmMjO-jvoFT8PxXvSjyM"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = defaultdict(lambda: "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
messages = {
    "start": {
        "ru": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π.",
        "en": "Hello! Please choose a language: Russian, English, or Vietnamese.",
        "vi": "Xin ch√†o! Vui l√≤ng ch·ªçn ng√¥n ng·ªØ: Ti·∫øng Nga, Ti·∫øng Anh ho·∫∑c Ti·∫øng Vi·ªát."
    },
    "language_set": {
        "ru": "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π.",
        "en": "Language set to: English.",
        "vi": "Ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c ch·ªçn: Ti·∫øng Vi·ªát."
    },
    "processing": {
        "ru": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "en": "Processing your link, please wait...",
        "vi": "ƒêang x·ª≠ l√Ω li√™n k·∫øt c·ªßa b·∫°n, vui l√≤ng ƒë·ª£i..."
    },
    "invalid_reels": {
        "ru": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.",
        "en": "Send me a Reels link, and I will help you download the video.",
        "vi": "G·ª≠i cho t√¥i li√™n k·∫øt Reels, t√¥i s·∫Ω gi√∫p b·∫°n t·∫£i video."
    },
    "error": {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
        "en": "Failed to download the video. Please check the link.",
        "vi": "Kh√¥ng t·∫£i ƒë∆∞·ª£c video. Vui l√≤ng ki·ªÉm tra li√™n k·∫øt."
    }
}

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if data and "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        message_id = message["message_id"]
        text = message.get("text", "").strip().lower()

        # –ö–æ–º–∞–Ω–¥–∞ /start
        if text == "/start":
            send_message(chat_id, messages["start"]["ru"])
            return jsonify({"message": "Start command processed"}), 200

        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        if text in ["—Ä—É—Å—Å–∫–∏–π", "english", "vietnamese"]:
            if text == "—Ä—É—Å—Å–∫–∏–π":
                user_languages[chat_id] = "ru"
            elif text == "english":
                user_languages[chat_id] = "en"
            elif text == "vietnamese":
                user_languages[chat_id] = "vi"

            lang = user_languages[chat_id]
            send_message(chat_id, messages["language_set"][lang])
            return jsonify({"message": "Language set"}), 200

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Reels
        if 'instagram.com/reel/' in text:
            lang = user_languages[chat_id]
            processing_message = send_message(chat_id, messages["processing"][lang])
            success = send_reels_video(chat_id, text)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É" –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
            delete_message(chat_id, processing_message)
            delete_message(chat_id, message_id)

            if not success:
                send_message(chat_id, messages["error"][lang])
        else:
            lang = user_languages[chat_id]
            send_message(chat_id, messages["invalid_reels"][lang])

    return jsonify({"message": "Webhook received!"}), 200

@app.route('/')
def index():
    return "Server is running", 200

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
@app.before_first_request
def setup_webhook():
    if TELEGRAM_TOKEN and WEBHOOK_URL:
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
            json={"url": f"{WEBHOOK_URL}"}
        )
        print(f"Webhook setup response: {response.json()}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    response = requests.post(url, json=payload)
    return response.json().get("result", {}).get("message_id")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def delete_message(chat_id, message_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage"
    payload = {"chat_id": chat_id, "message_id": message_id}
    requests.post(url, json=payload)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram –∫ –≤–∏–¥–µ–æ
def is_valid_for_telegram(video_content):
    video_size_mb = len(video_content) / (1024 * 1024)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if video_size_mb > 20:
        return False
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –∏–∑ Reels

def send_reels_video(chat_id, reels_url):
    try:
        loader = instaloader.Instaloader()
        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –∏–∑ —Å—Å—ã–ª–∫–∏
        shortcode = reels_url.split("/")[-2]
        post = instaloader.Post.from_shortcode(loader.context, shortcode)

        video_url = post.video_url
        if video_url:
            response = requests.get(video_url, stream=True)
            response.raise_for_status()

            video_content = response.content

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∏–¥–µ–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram
            if is_valid_for_telegram(video_content):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendVideo"
                files = {"video": ("reels_video.mp4", video_content)}
                data = {
                    "chat_id": chat_id,
                    "supports_streaming": True,  # –í–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    "caption": "–í–∞—à–µ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels üé•",
                    "parse_mode": "HTML"  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                }
                response = requests.post(url, data=data, files=files)

                if response.status_code != 200:
                    print(f"Telegram API error when sending video: {response.json()}")
                    return False
            else:
                send_message(chat_id, "‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument"
                files = {"document": ("reels_video.mp4", video_content)}
                data = {
                    "chat_id": chat_id,
                    "caption": "–í–∞—à–µ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels üé• (–∏—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)",
                }
                response = requests.post(url, data=data, files=files)
                if response.status_code != 200:
                    print(f"Telegram API error when sending document: {response.json()}")
                    return False

            return True
        else:
            print("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ.")
            return False
    except Exception as e:
        print(f"Error sending video: {e}")
        return False

if __name__ == '__main__':
    app.run(debug=True)
