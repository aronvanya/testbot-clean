import os
from flask import Flask, request, jsonify
import requests
import re
import tempfile
from pathlib import Path

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö
MESSAGES = {
    "en": {
        "welcome": "üëã Welcome! This bot helps you download Instagram Reels. Please choose your language:",
        "instruction": (
            "You can send me a link directly or add me to a group, and I'll process links shared there.\n\n"
            "Commands:\n"
            "/start - Restart the bot\n"
            "/help - Get instructions"
        ),
        "language_updated": "‚úÖ Language updated to English.",
        "invalid_link": "‚ùå This is not a valid Instagram Reel link. Please send a correct link.",
        "processing": "‚è≥ Processing your request...",
        "success": "‚úÖ Reel downloaded successfully!",
        "error": "‚ùå Failed to download the Reel. Please try again later.",
    },
    "ru": {
        "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∫–∞—á–∞—Ç—å —Ä–∏–ª—Å—ã –∏–∑ Instagram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "instruction": (
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        ),
        "language_updated": "‚úÖ –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "invalid_link": "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∏–ª—Å –∏–∑ Instagram. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.",
        "processing": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...",
        "success": "‚úÖ –†–∏–ª—Å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!",
        "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ä–∏–ª—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    },
    "vi": {
        "welcome": "üëã Xin ch√†o! Bot n√†y s·∫Ω gi√∫p b·∫°n t·∫£i Reels t·ª´ Instagram. Vui l√≤ng ch·ªçn ng√¥n ng·ªØ:",
        "instruction": (
            "B·∫°n c√≥ th·ªÉ g·ª≠i li√™n k·∫øt tr·ª±c ti·∫øp ho·∫∑c th√™m t√¥i v√†o nh√≥m, v√† t√¥i s·∫Ω x·ª≠ l√Ω c√°c li√™n k·∫øt ƒë∆∞·ª£c chia s·∫ª ·ªü ƒë√≥.\n\n"
            "L·ªánh:\n"
            "/start - Kh·ªüi ƒë·ªông l·∫°i bot\n"
            "/help - Nh·∫≠n h∆∞·ªõng d·∫´n"
        ),
        "language_updated": "‚úÖ Ng√¥n ng·ªØ ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang Ti·∫øng Vi·ªát.",
        "invalid_link": "‚ùå ƒê√¢y kh√¥ng ph·∫£i l√† li√™n k·∫øt Instagram Reels h·ª£p l·ªá. Vui l√≤ng g·ª≠i li√™n k·∫øt ch√≠nh x√°c.",
        "processing": "‚è≥ ƒêang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n...",
        "success": "‚úÖ T·∫£i xu·ªëng Reels th√†nh c√¥ng!",
        "error": "‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c Reels. H√£y th·ª≠ l·∫°i sau.",
    },
}

USER_LANGUAGES = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if not data:
        return jsonify({"message": "No data received"}), 400

    if "message" in data:
        handle_message(data["message"])

    return jsonify({"message": "OK"}), 200


def handle_message(message):
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫
    lang = USER_LANGUAGES.get(chat_id, "en")  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    if text == "/start":
        send_start_message(chat_id)
    elif text in ["English", "–†—É—Å—Å–∫–∏–π", "Ti·∫øng Vi·ªát"]:
        set_user_language(chat_id, text)
    elif text == "/help":
        send_message(chat_id, MESSAGES[lang]["instruction"])
    elif is_instagram_reel_link(text):
        download_and_send_reel(chat_id, text, lang)
    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_message(chat_id, MESSAGES[lang]["invalid_link"])


def is_instagram_reel_link(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ Instagram Reel."""
    pattern = r"(https?:\/\/(?:www\.)?instagram\.com\/reel\/[a-zA-Z0-9_-]+)"
    return re.match(pattern, text) is not None


def send_start_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    lang = "en"  # –ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    keyboard = {
        "keyboard": [[{"text": "English"}], [{"text": "–†—É—Å—Å–∫–∏–π"}], [{"text": "Ti·∫øng Vi·ªát"}]],
        "one_time_keyboard": True,
        "resize_keyboard": True,
    }
    message = f"{MESSAGES[lang]['welcome']}\n\n{MESSAGES[lang]['instruction']}"
    send_message(chat_id, message, keyboard)


def set_user_language(chat_id, language):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if language == "English":
        USER_LANGUAGES[chat_id] = "en"
    elif language == "–†—É—Å—Å–∫–∏–π":
        USER_LANGUAGES[chat_id] = "ru"
    elif language == "Ti·∫øng Vi·ªát":
        USER_LANGUAGES[chat_id] = "vi"

    lang = USER_LANGUAGES[chat_id]
    message = f"{MESSAGES[lang]['language_updated']}\n\n{MESSAGES[lang]['instruction']}"
    send_message(chat_id, message)


def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    requests.post(url, json=payload)


def download_and_send_reel(chat_id, url, lang):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∏–ª—Å–∞."""
    try:
        send_message(chat_id, MESSAGES[lang]["processing"])

        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        response = requests.get(f"https://api.downloadgram.org/?url={url}", stream=True)
        response.raise_for_status()

        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_file:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    temp_file.write(chunk)
            temp_file_path = temp_file.name

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        with open(temp_file_path, "rb") as video_file:
            requests.post(
                f"{TELEGRAM_API_URL}/sendVideo",
                data={"chat_id": chat_id},
                files={"video": video_file},
            )

        send_message(chat_id, MESSAGES[lang]["success"])

    except Exception as e:
        send_message(chat_id, f"{MESSAGES[lang]['error']}\n\nError: {e}")


@app.route('/')
def index():
    return "Server is running", 200


if __name__ == "__main__":
    app.run(debug=True)
