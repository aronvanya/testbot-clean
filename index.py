from flask import Flask, request, jsonify
import os
import requests
import instaloader

app = Flask(__name__)

WEBHOOK_URL = "https://testbot-clean.vercel.app/webhook"
TELEGRAM_TOKEN = "7648873218:AAGs6RZlBrVjr1TkmMjO-jvoFT8PxXvSjyM"

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    if data and "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]
        message_id = message["message_id"]
        text = message.get("text", "")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = message["from"].get("username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text == "/start":
            send_message(chat_id, (
                "üëã *–ü—Ä–∏–≤–µ—Ç!*\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram Reels. üìπ\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –∑–∞ –≤–∞—Å. ‚úÖ\n\n"
                "‚ú® *–ë–æ—Ç —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö!* ‚ú®\n"
                "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. üöÄ"
            ), parse_mode="Markdown")
            return jsonify({"message": "Start command processed"}), 200

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Reels
        if 'instagram.com/reel/' in text:
            processing_message_id = send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            success = send_reels_video(chat_id, text.strip(), user_name)
            if success:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                delete_message(chat_id, processing_message_id)
                delete_message(chat_id, message_id)
            else:
                send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            return jsonify({"message": "Reels link processed"}), 200

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return jsonify({"message": "Message ignored"}), 200

    return jsonify({"message": "Webhook received!"}), 200

@app.route('/')
def index():
    return "Server is running", 200

def send_message(chat_id, text, parse_mode=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    response = requests.post(url, json=payload)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    return response.json().get("result", {}).get("message_id")

def delete_message(chat_id, message_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage"
    payload = {"chat_id": chat_id, "message_id": message_id}
    requests.post(url, json=payload)

def send_reels_video(chat_id, reels_url, user_name):
    try:
        loader = instaloader.Instaloader()

        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –∏–∑ —Å—Å—ã–ª–∫–∏
        shortcode = reels_url.split("/")[-2]
        post = instaloader.Post.from_shortcode(loader.context, shortcode)

        video_url = post.video_url
        if video_url:
            response = requests.get(video_url, stream=True)
            response.raise_for_status()

            video_content = response.content

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram
            if not is_valid_for_telegram(video_content):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
                send_video_as_document(chat_id, video_content, user_name, reason="–í–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Å –±–æ–ª—å—à–µ 20 MB).")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–µ
                send_video_as_stream(chat_id, video_content, user_name)

            return True
        else:
            print("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ.")
            return False
    except Exception as e:
        print(f"Error sending video: {e}")
        return False

def is_valid_for_telegram(video_content):
    video_size_mb = len(video_content) / (1024 * 1024)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–¥–æ 20 MB)
    if video_size_mb > 20:
        return False
    # –ü—Ä–æ–ø—É—Å—Ç–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª–∏–Ω–∞, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω) –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    return True

def send_video_as_stream(chat_id, video_content, user_name):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendVideo"
    files = {"video": ("reels_video.mp4", video_content)}
    data = {
        "chat_id": chat_id,
        "caption": f"üìπ –í–∏–¥–µ–æ –æ—Ç @{user_name} üöÄ",
        "supports_streaming": True
    }
    requests.post(url, data=data, files=files)

def send_video_as_document(chat_id, video_content, user_name, reason):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument"
    files = {"document": ("reels_video.mp4", video_content)}
    data = {
        "chat_id": chat_id,
        "caption": f"üìÅ –í–∏–¥–µ–æ –æ—Ç @{user_name} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª) üöÄ\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    }
    requests.post(url, data=data, files=files)

if __name__ == '__main__':
    app.run(debug=True)
